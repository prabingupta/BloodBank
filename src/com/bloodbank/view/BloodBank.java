package com.bloodbank.view;

import javax.swing.JOptionPane;
import com.bloodbank.model.BloodModel;
import com.bloodbank.util.ValidationUtil;
import java.util.LinkedList;
import javax.swing.table.DefaultTableModel;
import java.util.List;
import javax.swing.JLabel;
import javax.swing.JTextField;
import java.awt.Color;
import com.bloodbank.controller.algorithms.SelectionSort;
import com.bloodbank.controller.algorithms.BinarySearch;
import com.bloodbank.controller.algorithms.InsertionSort;
import com.bloodbank.controller.algorithms.MergeSort;




/**
 *
 * @author prabinkumargupta
 * LMU ID: 23048504
 */
public class BloodBank extends javax.swing.JFrame {
    private List<BloodModel> donorList;
    private java.awt.CardLayout cardLayout;
    private final ValidationUtil validationUtil;
    private final Color errorDarkRed = new Color(139, 0, 0); // Darker shade of red
    private final Color whiteColor = new Color(255, 255, 255);

    
    

    
    
    /**
     * Creates new form BloodBank
     */
    public BloodBank() {
        initComponents();
       validationUtil = new ValidationUtil();
        initializePanelLayout(); // Setting card layout and adding on screen
        toInitializeData(); // Initializing data of donor and table 
        runProgress(); // showing loading screen and initialize progress
       
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlDonorDashBoard = new javax.swing.JPanel();
        pnlMainBar = new javax.swing.JPanel();
        lblLogo = new javax.swing.JLabel();
        lblHeadingTitle1 = new javax.swing.JLabel();
        lblSubHeading1 = new javax.swing.JLabel();
        btnLogout = new javax.swing.JButton();
        lblLogout = new javax.swing.JLabel();
        tabPanMain = new javax.swing.JTabbedPane();
        pnlHome = new javax.swing.JPanel();
        pnlMiddleHome = new javax.swing.JPanel();
        lblMiddle = new javax.swing.JLabel();
        lblSubMiddle = new javax.swing.JLabel();
        lblFooterTitle = new javax.swing.JLabel();
        lblFooterTitle1 = new javax.swing.JLabel();
        lblHandImg = new javax.swing.JLabel();
        lblWelcomeBloodBankTitle = new javax.swing.JLabel();
        pnlDonorList = new javax.swing.JPanel();
        spTblDonor = new javax.swing.JScrollPane();
        tblDonor = new javax.swing.JTable();
        lblInfoTable = new javax.swing.JLabel();
        pnlDonorData = new javax.swing.JPanel();
        lblErrorDonorId = new javax.swing.JLabel();
        txtFldFullName = new javax.swing.JTextField();
        lblErrorFullName = new javax.swing.JLabel();
        txtFldDonorId = new javax.swing.JTextField();
        lblErrorAge = new javax.swing.JLabel();
        txtFldBloodGroup = new javax.swing.JTextField();
        txtFldAge = new javax.swing.JTextField();
        lblErrorContact = new javax.swing.JLabel();
        lblErrorBloodGroup = new javax.swing.JLabel();
        txtFldContact = new javax.swing.JTextField();
        lblErrorEmail = new javax.swing.JLabel();
        txtFldAddress = new javax.swing.JTextField();
        lblErrorAddress = new javax.swing.JLabel();
        txtFldEmail = new javax.swing.JTextField();
        lblErrorGender = new javax.swing.JLabel();
        txtFldGender = new javax.swing.JTextField();
        btnDelete = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        lblDonorData = new javax.swing.JLabel();
        btnSelectionSortDonorId = new javax.swing.JButton();
        txtFldSearch = new javax.swing.JTextField();
        btnSearchName = new javax.swing.JButton();
        btnInsertionSortAddress = new javax.swing.JButton();
        btnMergeSortAge = new javax.swing.JButton();
        pnlContactUs = new javax.swing.JPanel();
        pnlImgDonate = new javax.swing.JPanel();
        lblDonateImg = new javax.swing.JLabel();
        pnlContactDetails = new javax.swing.JPanel();
        pnlDetails = new javax.swing.JPanel();
        lblContactUs = new javax.swing.JLabel();
        lblLocation = new javax.swing.JLabel();
        lblAddressDetail = new javax.swing.JLabel();
        lblSendMessage = new javax.swing.JLabel();
        lblMessageDetail = new javax.swing.JLabel();
        lblCallUs = new javax.swing.JLabel();
        lblCallingDetails = new javax.swing.JLabel();
        lblIconSendMsg = new javax.swing.JLabel();
        lblIconAddress = new javax.swing.JLabel();
        lblCallIcon = new javax.swing.JLabel();
        lblPointingIcon = new javax.swing.JLabel();
        pnlDonorLogin = new javax.swing.JPanel();
        pnlLogin = new javax.swing.JPanel();
        pnlRightLogin = new javax.swing.JPanel();
        lblSingnInTitle = new javax.swing.JLabel();
        lblAdminLogo = new javax.swing.JLabel();
        lblSubHeadingTitleLogin = new javax.swing.JLabel();
        lblForgetPassword = new javax.swing.JLabel();
        btnLogin = new javax.swing.JButton();
        lblErrorLogin = new javax.swing.JLabel();
        txtFldUsername = new javax.swing.JTextField();
        pwFldPassword = new javax.swing.JPasswordField();
        lblheading = new javax.swing.JLabel();
        lblLogoBlood = new javax.swing.JLabel();
        pnlWelcomeScreen = new javax.swing.JPanel();
        lblBloodLogo = new javax.swing.JLabel();
        lblHeadingTitle = new javax.swing.JLabel();
        lblSubHeading = new javax.swing.JLabel();
        lblThirdHeading = new javax.swing.JLabel();
        pgBarSplashScreen = new javax.swing.JProgressBar();
        lblLoading = new javax.swing.JLabel();

        pnlDonorDashBoard.setPreferredSize(new java.awt.Dimension(900, 550));

        lblLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/bloodbank/resources/blood-bank.png"))); // NOI18N

        lblHeadingTitle1.setBackground(new java.awt.Color(255, 255, 255));
        lblHeadingTitle1.setFont(new java.awt.Font("Helvetica Neue", 1, 24)); // NOI18N
        lblHeadingTitle1.setForeground(new java.awt.Color(204, 0, 51));
        lblHeadingTitle1.setText("Blood Bank Management System");

        lblSubHeading1.setBackground(new java.awt.Color(204, 0, 0));
        lblSubHeading1.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        lblSubHeading1.setForeground(new java.awt.Color(204, 0, 0));
        lblSubHeading1.setText("Donate Blood Save Life");

        btnLogout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/bloodbank/resources/logout-removebg-preview (1).png"))); // NOI18N
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });

        lblLogout.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        lblLogout.setForeground(new java.awt.Color(204, 0, 51));
        lblLogout.setText("LOGOUT");

        javax.swing.GroupLayout pnlMainBarLayout = new javax.swing.GroupLayout(pnlMainBar);
        pnlMainBar.setLayout(pnlMainBarLayout);
        pnlMainBarLayout.setHorizontalGroup(
            pnlMainBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainBarLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblLogo)
                .addGap(35, 35, 35)
                .addGroup(pnlMainBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblHeadingTitle1, javax.swing.GroupLayout.PREFERRED_SIZE, 392, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSubHeading1, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblLogout)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnLogout)
                .addGap(39, 39, 39))
        );
        pnlMainBarLayout.setVerticalGroup(
            pnlMainBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainBarLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(pnlMainBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblLogo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMainBarLayout.createSequentialGroup()
                        .addGroup(pnlMainBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlMainBarLayout.createSequentialGroup()
                                .addComponent(lblHeadingTitle1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblSubHeading1))
                            .addGroup(pnlMainBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(lblLogout, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnLogout)))
                        .addGap(10, 10, 10))))
        );

        tabPanMain.setBackground(new java.awt.Color(255, 255, 255));
        tabPanMain.setForeground(new java.awt.Color(204, 0, 0));
        tabPanMain.setFont(new java.awt.Font("Helvetica Neue", 1, 15)); // NOI18N

        pnlMiddleHome.setBackground(new java.awt.Color(204, 0, 51));

        lblMiddle.setFont(new java.awt.Font("Serif", 0, 28)); // NOI18N
        lblMiddle.setForeground(new java.awt.Color(255, 255, 255));
        lblMiddle.setText("The blood you donate gives someone");

        lblSubMiddle.setFont(new java.awt.Font("Serif", 0, 28)); // NOI18N
        lblSubMiddle.setForeground(new java.awt.Color(255, 255, 255));
        lblSubMiddle.setText("another chance at life.");

        lblFooterTitle.setFont(new java.awt.Font("Serif", 1, 30)); // NOI18N
        lblFooterTitle.setForeground(new java.awt.Color(255, 255, 255));
        lblFooterTitle.setText("GIVE THE GIFT OF LIFE");

        lblFooterTitle1.setFont(new java.awt.Font("Serif", 1, 36)); // NOI18N
        lblFooterTitle1.setForeground(new java.awt.Color(255, 255, 255));
        lblFooterTitle1.setText("DONATE BLOOD");

        lblHandImg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/bloodbank/resources/bloodIcon_Hand.png"))); // NOI18N

        javax.swing.GroupLayout pnlMiddleHomeLayout = new javax.swing.GroupLayout(pnlMiddleHome);
        pnlMiddleHome.setLayout(pnlMiddleHomeLayout);
        pnlMiddleHomeLayout.setHorizontalGroup(
            pnlMiddleHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMiddleHomeLayout.createSequentialGroup()
                .addGroup(pnlMiddleHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMiddleHomeLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblSubMiddle, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(178, 178, 178))
                    .addGroup(pnlMiddleHomeLayout.createSequentialGroup()
                        .addGroup(pnlMiddleHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlMiddleHomeLayout.createSequentialGroup()
                                .addGap(58, 58, 58)
                                .addGroup(pnlMiddleHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblFooterTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 425, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblMiddle, javax.swing.GroupLayout.PREFERRED_SIZE, 425, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(pnlMiddleHomeLayout.createSequentialGroup()
                                .addGap(85, 85, 85)
                                .addComponent(lblFooterTitle1, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 159, Short.MAX_VALUE)))
                .addComponent(lblHandImg, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnlMiddleHomeLayout.setVerticalGroup(
            pnlMiddleHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMiddleHomeLayout.createSequentialGroup()
                .addGap(84, 84, 84)
                .addComponent(lblMiddle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblSubMiddle, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(66, 66, 66)
                .addComponent(lblFooterTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblFooterTitle1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(lblHandImg, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 362, Short.MAX_VALUE)
        );

        lblWelcomeBloodBankTitle.setFont(new java.awt.Font("Helvetica Neue", 1, 22)); // NOI18N
        lblWelcomeBloodBankTitle.setText("Welcome To Blood Bank & Donor Management System");

        javax.swing.GroupLayout pnlHomeLayout = new javax.swing.GroupLayout(pnlHome);
        pnlHome.setLayout(pnlHomeLayout);
        pnlHomeLayout.setHorizontalGroup(
            pnlHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlMiddleHome, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(pnlHomeLayout.createSequentialGroup()
                .addGap(149, 149, 149)
                .addComponent(lblWelcomeBloodBankTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 596, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlHomeLayout.setVerticalGroup(
            pnlHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlHomeLayout.createSequentialGroup()
                .addComponent(pnlMiddleHome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblWelcomeBloodBankTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 62, Short.MAX_VALUE))
        );

        tabPanMain.addTab("Home", pnlHome);

        pnlDonorList.setBackground(new java.awt.Color(255, 255, 255));
        pnlDonorList.setPreferredSize(new java.awt.Dimension(900, 600));

        tblDonor.setBackground(new java.awt.Color(204, 0, 0));
        tblDonor.setForeground(new java.awt.Color(255, 255, 255));
        tblDonor.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Donor Id", "Full Name", "Age", "Contact", "Blood Group", "Address", "Email", "Gender"
            }
        ));
        tblDonor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDonorMouseClicked(evt);
            }
        });
        spTblDonor.setViewportView(tblDonor);

        lblInfoTable.setBackground(new java.awt.Color(204, 0, 51));
        lblInfoTable.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        lblInfoTable.setForeground(new java.awt.Color(204, 0, 51));
        lblInfoTable.setText("Donor Information Table");

        pnlDonorData.setBackground(new java.awt.Color(0, 0, 0));
        pnlDonorData.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        lblErrorDonorId.setFont(new java.awt.Font("Helvetica Neue", 0, 9)); // NOI18N
        lblErrorDonorId.setForeground(new java.awt.Color(204, 0, 0));

        txtFldFullName.setBackground(new java.awt.Color(0, 0, 0));
        txtFldFullName.setForeground(new java.awt.Color(255, 255, 255));
        txtFldFullName.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2), "Full Name", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Helvetica Neue", 1, 15), new java.awt.Color(255, 255, 255))); // NOI18N
        txtFldFullName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFldFullNameActionPerformed(evt);
            }
        });

        lblErrorFullName.setFont(new java.awt.Font("Helvetica Neue", 0, 9)); // NOI18N
        lblErrorFullName.setForeground(new java.awt.Color(204, 0, 0));

        txtFldDonorId.setBackground(new java.awt.Color(0, 0, 0));
        txtFldDonorId.setForeground(new java.awt.Color(255, 255, 255));
        txtFldDonorId.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2), "Donor ID", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Helvetica Neue", 1, 15), new java.awt.Color(255, 255, 255))); // NOI18N

        lblErrorAge.setFont(new java.awt.Font("Helvetica Neue", 0, 9)); // NOI18N
        lblErrorAge.setForeground(new java.awt.Color(204, 0, 0));

        txtFldBloodGroup.setBackground(new java.awt.Color(0, 0, 0));
        txtFldBloodGroup.setForeground(new java.awt.Color(255, 255, 255));
        txtFldBloodGroup.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2), "Blood Group", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Helvetica Neue", 1, 15), new java.awt.Color(255, 255, 255))); // NOI18N

        txtFldAge.setBackground(new java.awt.Color(0, 0, 0));
        txtFldAge.setForeground(new java.awt.Color(255, 255, 255));
        txtFldAge.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2), "Age", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Helvetica Neue", 1, 15), new java.awt.Color(255, 255, 255))); // NOI18N

        lblErrorContact.setFont(new java.awt.Font("Helvetica Neue", 0, 9)); // NOI18N
        lblErrorContact.setForeground(new java.awt.Color(204, 0, 0));

        lblErrorBloodGroup.setFont(new java.awt.Font("Helvetica Neue", 0, 9)); // NOI18N
        lblErrorBloodGroup.setForeground(new java.awt.Color(204, 0, 0));

        txtFldContact.setBackground(new java.awt.Color(0, 0, 0));
        txtFldContact.setForeground(new java.awt.Color(255, 255, 255));
        txtFldContact.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2), "Contact", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Helvetica Neue", 1, 15), new java.awt.Color(255, 255, 255))); // NOI18N

        lblErrorEmail.setFont(new java.awt.Font("Helvetica Neue", 0, 9)); // NOI18N
        lblErrorEmail.setForeground(new java.awt.Color(204, 0, 0));

        txtFldAddress.setBackground(new java.awt.Color(0, 0, 0));
        txtFldAddress.setForeground(new java.awt.Color(255, 255, 255));
        txtFldAddress.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2), "Address", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Helvetica Neue", 1, 15), new java.awt.Color(255, 255, 255))); // NOI18N

        lblErrorAddress.setFont(new java.awt.Font("Helvetica Neue", 0, 9)); // NOI18N
        lblErrorAddress.setForeground(new java.awt.Color(204, 0, 0));

        txtFldEmail.setBackground(new java.awt.Color(0, 0, 0));
        txtFldEmail.setForeground(new java.awt.Color(255, 255, 255));
        txtFldEmail.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2), "Email", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Helvetica Neue", 1, 15), new java.awt.Color(255, 255, 255))); // NOI18N

        lblErrorGender.setFont(new java.awt.Font("Helvetica Neue", 0, 9)); // NOI18N
        lblErrorGender.setForeground(new java.awt.Color(204, 0, 0));

        txtFldGender.setBackground(new java.awt.Color(0, 0, 0));
        txtFldGender.setForeground(new java.awt.Color(255, 255, 255));
        txtFldGender.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2), "Gender", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Helvetica Neue", 1, 15), new java.awt.Color(255, 255, 255))); // NOI18N

        btnDelete.setBackground(new java.awt.Color(204, 0, 0));
        btnDelete.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(255, 255, 255));
        btnDelete.setText("DELETE");
        btnDelete.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnAdd.setBackground(new java.awt.Color(204, 0, 0));
        btnAdd.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        btnAdd.setForeground(new java.awt.Color(255, 255, 255));
        btnAdd.setText("ADD");
        btnAdd.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnClear.setBackground(new java.awt.Color(204, 0, 0));
        btnClear.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        btnClear.setForeground(new java.awt.Color(255, 255, 255));
        btnClear.setText("CLEAR");
        btnClear.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnUpdate.setBackground(new java.awt.Color(204, 0, 0));
        btnUpdate.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        btnUpdate.setForeground(new java.awt.Color(255, 255, 255));
        btnUpdate.setText("UPDATE");
        btnUpdate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlDonorDataLayout = new javax.swing.GroupLayout(pnlDonorData);
        pnlDonorData.setLayout(pnlDonorDataLayout);
        pnlDonorDataLayout.setHorizontalGroup(
            pnlDonorDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDonorDataLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(pnlDonorDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtFldDonorId, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)
                    .addComponent(txtFldAddress)
                    .addComponent(lblErrorDonorId, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblErrorAddress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(27, 27, 27)
                .addGroup(pnlDonorDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblErrorFullName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnlDonorDataLayout.createSequentialGroup()
                        .addGroup(pnlDonorDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtFldFullName, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtFldEmail, javax.swing.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE)
                            .addComponent(lblErrorEmail, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlDonorDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlDonorDataLayout.createSequentialGroup()
                        .addGroup(pnlDonorDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblErrorGender, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtFldGender, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(pnlDonorDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(42, 42, 42)
                        .addGroup(pnlDonorDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(50, 50, 50))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlDonorDataLayout.createSequentialGroup()
                        .addGroup(pnlDonorDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblErrorAge, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtFldAge, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addGroup(pnlDonorDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlDonorDataLayout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addComponent(lblErrorContact, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(pnlDonorDataLayout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addComponent(txtFldContact, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(18, 18, 18)
                        .addGroup(pnlDonorDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblErrorBloodGroup, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtFldBloodGroup, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        pnlDonorDataLayout.setVerticalGroup(
            pnlDonorDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDonorDataLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(pnlDonorDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFldDonorId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFldFullName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFldAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFldContact, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFldBloodGroup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlDonorDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(lblErrorFullName, javax.swing.GroupLayout.DEFAULT_SIZE, 10, Short.MAX_VALUE)
                    .addComponent(lblErrorDonorId, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblErrorBloodGroup, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblErrorContact, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblErrorAge, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlDonorDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlDonorDataLayout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addGroup(pnlDonorDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlDonorDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtFldAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtFldEmail)
                        .addComponent(txtFldGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlDonorDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblErrorEmail, javax.swing.GroupLayout.DEFAULT_SIZE, 11, Short.MAX_VALUE)
                    .addComponent(lblErrorAddress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblErrorGender, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlDonorDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(45, 45, 45))
        );

        lblDonorData.setBackground(new java.awt.Color(204, 0, 51));
        lblDonorData.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        lblDonorData.setForeground(new java.awt.Color(204, 0, 51));
        lblDonorData.setText("Donor Data");

        btnSelectionSortDonorId.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        btnSelectionSortDonorId.setForeground(new java.awt.Color(204, 51, 0));
        btnSelectionSortDonorId.setText("Sort Donor ID");
        btnSelectionSortDonorId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectionSortDonorIdActionPerformed(evt);
            }
        });

        btnSearchName.setFont(new java.awt.Font("Helvetica Neue", 1, 16)); // NOI18N
        btnSearchName.setForeground(new java.awt.Color(204, 0, 0));
        btnSearchName.setText("Search Name");
        btnSearchName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchNameActionPerformed(evt);
            }
        });

        btnInsertionSortAddress.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        btnInsertionSortAddress.setForeground(new java.awt.Color(204, 0, 0));
        btnInsertionSortAddress.setText("Sort Address");
        btnInsertionSortAddress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertionSortAddressActionPerformed(evt);
            }
        });

        btnMergeSortAge.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        btnMergeSortAge.setForeground(new java.awt.Color(204, 0, 0));
        btnMergeSortAge.setText("MergeSort Age");
        btnMergeSortAge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMergeSortAgeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlDonorListLayout = new javax.swing.GroupLayout(pnlDonorList);
        pnlDonorList.setLayout(pnlDonorListLayout);
        pnlDonorListLayout.setHorizontalGroup(
            pnlDonorListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDonorListLayout.createSequentialGroup()
                .addComponent(spTblDonor)
                .addContainerGap())
            .addComponent(pnlDonorData, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(pnlDonorListLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlDonorListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlDonorListLayout.createSequentialGroup()
                        .addComponent(lblDonorData, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(pnlDonorListLayout.createSequentialGroup()
                        .addComponent(lblInfoTable, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45)
                        .addComponent(btnSearchName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtFldSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(btnMergeSortAge, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(btnInsertionSortAddress)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSelectionSortDonorId)
                        .addGap(15, 15, 15))))
        );
        pnlDonorListLayout.setVerticalGroup(
            pnlDonorListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDonorListLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlDonorListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(pnlDonorListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblInfoTable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSearchName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtFldSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnMergeSortAge))
                    .addGroup(pnlDonorListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnSelectionSortDonorId)
                        .addComponent(btnInsertionSortAddress)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spTblDonor, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblDonorData)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnlDonorData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabPanMain.addTab("Donor List", pnlDonorList);

        pnlImgDonate.setBackground(new java.awt.Color(204, 0, 51));

        lblDonateImg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/bloodbank/resources/bloodnonate-removebg.png"))); // NOI18N

        javax.swing.GroupLayout pnlImgDonateLayout = new javax.swing.GroupLayout(pnlImgDonate);
        pnlImgDonate.setLayout(pnlImgDonateLayout);
        pnlImgDonateLayout.setHorizontalGroup(
            pnlImgDonateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlImgDonateLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblDonateImg)
                .addGap(206, 206, 206))
        );
        pnlImgDonateLayout.setVerticalGroup(
            pnlImgDonateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblDonateImg, javax.swing.GroupLayout.PREFERRED_SIZE, 223, Short.MAX_VALUE)
        );

        pnlContactDetails.setBackground(new java.awt.Color(0, 0, 0));

        pnlDetails.setBackground(new java.awt.Color(204, 0, 51));
        pnlDetails.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 3));

        lblContactUs.setFont(new java.awt.Font("Serif", 1, 22)); // NOI18N
        lblContactUs.setForeground(new java.awt.Color(255, 255, 255));
        lblContactUs.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblContactUs.setText("CONTACT US");

        lblLocation.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        lblLocation.setForeground(new java.awt.Color(255, 255, 255));
        lblLocation.setText("Address:");

        lblAddressDetail.setFont(new java.awt.Font("Helvetica Neue", 0, 15)); // NOI18N
        lblAddressDetail.setForeground(new java.awt.Color(255, 255, 255));
        lblAddressDetail.setText("29, Anamnagar,st.Kathmandu Nepal");

        lblSendMessage.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        lblSendMessage.setForeground(new java.awt.Color(255, 255, 255));
        lblSendMessage.setText("Send Message:");

        lblMessageDetail.setFont(new java.awt.Font("Helvetica Neue", 0, 15)); // NOI18N
        lblMessageDetail.setForeground(new java.awt.Color(255, 255, 255));
        lblMessageDetail.setText("donatebloodnepal091@gmail.com");

        lblCallUs.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        lblCallUs.setForeground(new java.awt.Color(255, 255, 255));
        lblCallUs.setText("Call Us:");

        lblCallingDetails.setFont(new java.awt.Font("Helvetica Neue", 0, 15)); // NOI18N
        lblCallingDetails.setForeground(new java.awt.Color(255, 255, 255));
        lblCallingDetails.setText("+977-9812032423");

        lblIconSendMsg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/bloodbank/resources/new-email.png"))); // NOI18N

        lblIconAddress.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/bloodbank/resources/location-pin.png"))); // NOI18N

        lblCallIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/bloodbank/resources/contact-information.png"))); // NOI18N

        javax.swing.GroupLayout pnlDetailsLayout = new javax.swing.GroupLayout(pnlDetails);
        pnlDetails.setLayout(pnlDetailsLayout);
        pnlDetailsLayout.setHorizontalGroup(
            pnlDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDetailsLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(pnlDetailsLayout.createSequentialGroup()
                        .addComponent(lblIconSendMsg, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblSendMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblMessageDetail)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlDetailsLayout.createSequentialGroup()
                        .addComponent(lblCallIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblCallUs, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblCallingDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(247, 247, 247))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlDetailsLayout.createSequentialGroup()
                        .addComponent(lblIconAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlDetailsLayout.createSequentialGroup()
                                .addComponent(lblContactUs, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(194, 194, 194))
                            .addGroup(pnlDetailsLayout.createSequentialGroup()
                                .addComponent(lblLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblAddressDetail, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
        );
        pnlDetailsLayout.setVerticalGroup(
            pnlDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlDetailsLayout.createSequentialGroup()
                .addGroup(pnlDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlDetailsLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblContactUs, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlDetailsLayout.createSequentialGroup()
                        .addGroup(pnlDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(pnlDetailsLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(pnlDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblLocation)
                                    .addComponent(lblAddressDetail)))
                            .addGroup(pnlDetailsLayout.createSequentialGroup()
                                .addContainerGap(12, Short.MAX_VALUE)
                                .addComponent(lblIconAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblIconSendMsg, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblSendMessage)
                                .addComponent(lblMessageDetail, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(9, 9, 9)
                .addGroup(pnlDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblCallUs)
                        .addComponent(lblCallingDetails))
                    .addComponent(lblCallIcon))
                .addContainerGap())
        );

        lblPointingIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/bloodbank/resources/pointingdetails-removebg.png"))); // NOI18N
        lblPointingIcon.setText("jLabel1");

        javax.swing.GroupLayout pnlContactDetailsLayout = new javax.swing.GroupLayout(pnlContactDetails);
        pnlContactDetails.setLayout(pnlContactDetailsLayout);
        pnlContactDetailsLayout.setHorizontalGroup(
            pnlContactDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlContactDetailsLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(lblPointingIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 140, Short.MAX_VALUE)
                .addComponent(pnlDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 532, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(57, 57, 57))
        );
        pnlContactDetailsLayout.setVerticalGroup(
            pnlContactDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlContactDetailsLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(pnlContactDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlDetails, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPointingIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        javax.swing.GroupLayout pnlContactUsLayout = new javax.swing.GroupLayout(pnlContactUs);
        pnlContactUs.setLayout(pnlContactUsLayout);
        pnlContactUsLayout.setHorizontalGroup(
            pnlContactUsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlImgDonate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pnlContactDetails, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        pnlContactUsLayout.setVerticalGroup(
            pnlContactUsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlContactUsLayout.createSequentialGroup()
                .addComponent(pnlImgDonate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlContactDetails, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tabPanMain.addTab("Contact Us", pnlContactUs);

        javax.swing.GroupLayout pnlDonorDashBoardLayout = new javax.swing.GroupLayout(pnlDonorDashBoard);
        pnlDonorDashBoard.setLayout(pnlDonorDashBoardLayout);
        pnlDonorDashBoardLayout.setHorizontalGroup(
            pnlDonorDashBoardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlMainBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(tabPanMain)
        );
        pnlDonorDashBoardLayout.setVerticalGroup(
            pnlDonorDashBoardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDonorDashBoardLayout.createSequentialGroup()
                .addComponent(pnlMainBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tabPanMain, javax.swing.GroupLayout.DEFAULT_SIZE, 511, Short.MAX_VALUE))
        );

        pnlDonorLogin.setPreferredSize(new java.awt.Dimension(900, 550));

        pnlLogin.setBackground(new java.awt.Color(204, 0, 51));

        pnlRightLogin.setBackground(new java.awt.Color(0, 0, 0));

        lblSingnInTitle.setFont(new java.awt.Font("SansSerif", 1, 20)); // NOI18N
        lblSingnInTitle.setForeground(new java.awt.Color(255, 255, 255));
        lblSingnInTitle.setText("Sign in to Blood Bank");

        lblAdminLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/bloodbank/resources/admin.png"))); // NOI18N
        lblAdminLogo.setText("jLabel1");

        lblSubHeadingTitleLogin.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        lblSubHeadingTitleLogin.setForeground(new java.awt.Color(255, 255, 255));
        lblSubHeadingTitleLogin.setText("Please enter your login details below");

        lblForgetPassword.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        lblForgetPassword.setForeground(new java.awt.Color(255, 255, 255));
        lblForgetPassword.setText("                                    Forgot your Password?");

        btnLogin.setBackground(new java.awt.Color(204, 0, 0));
        btnLogin.setFont(new java.awt.Font("Helvetica Neue", 1, 16)); // NOI18N
        btnLogin.setForeground(new java.awt.Color(255, 255, 255));
        btnLogin.setText("LOGIN");
        btnLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoginActionPerformed(evt);
            }
        });

        lblErrorLogin.setFont(new java.awt.Font("Helvetica Neue", 0, 12)); // NOI18N
        lblErrorLogin.setForeground(new java.awt.Color(204, 51, 0));
        lblErrorLogin.setText("                       ");

        txtFldUsername.setBackground(new java.awt.Color(0, 0, 0));
        txtFldUsername.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        txtFldUsername.setForeground(new java.awt.Color(255, 255, 255));
        txtFldUsername.setText("prabin");
        txtFldUsername.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2), "Username", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("SansSerif", 1, 15), new java.awt.Color(255, 255, 255))); // NOI18N

        pwFldPassword.setBackground(new java.awt.Color(0, 0, 0));
        pwFldPassword.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        pwFldPassword.setForeground(new java.awt.Color(255, 255, 255));
        pwFldPassword.setText("prabin");
        pwFldPassword.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2), "Password", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Helvetica Neue", 1, 15), new java.awt.Color(255, 255, 255))); // NOI18N
        pwFldPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pwFldPasswordActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlRightLoginLayout = new javax.swing.GroupLayout(pnlRightLogin);
        pnlRightLogin.setLayout(pnlRightLoginLayout);
        pnlRightLoginLayout.setHorizontalGroup(
            pnlRightLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlRightLoginLayout.createSequentialGroup()
                .addGroup(pnlRightLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlRightLoginLayout.createSequentialGroup()
                        .addGap(116, 116, 116)
                        .addGroup(pnlRightLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtFldUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(pwFldPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblSingnInTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pnlRightLoginLayout.createSequentialGroup()
                        .addGap(173, 173, 173)
                        .addComponent(lblAdminLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(80, Short.MAX_VALUE))
            .addGroup(pnlRightLoginLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlRightLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblForgetPassword, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlRightLoginLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(lblErrorLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlRightLoginLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(pnlRightLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlRightLoginLayout.createSequentialGroup()
                        .addComponent(btnLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(79, 79, 79))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlRightLoginLayout.createSequentialGroup()
                        .addComponent(lblSubHeadingTitleLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(65, 65, 65))))
        );
        pnlRightLoginLayout.setVerticalGroup(
            pnlRightLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlRightLoginLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(lblAdminLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblSingnInTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblSubHeadingTitleLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(txtFldUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(pwFldPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblForgetPassword)
                .addGap(18, 18, 18)
                .addComponent(btnLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblErrorLogin)
                .addContainerGap(125, Short.MAX_VALUE))
        );

        lblheading.setFont(new java.awt.Font("Helvetica Neue", 1, 30)); // NOI18N
        lblheading.setForeground(new java.awt.Color(255, 255, 255));
        lblheading.setText("        Blood Bank Management ");

        lblLogoBlood.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/bloodbank/resources/blooddonationicon.png"))); // NOI18N

        javax.swing.GroupLayout pnlLoginLayout = new javax.swing.GroupLayout(pnlLogin);
        pnlLogin.setLayout(pnlLoginLayout);
        pnlLoginLayout.setHorizontalGroup(
            pnlLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLoginLayout.createSequentialGroup()
                .addGroup(pnlLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlLoginLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblheading, javax.swing.GroupLayout.PREFERRED_SIZE, 469, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2))
                    .addGroup(pnlLoginLayout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(lblLogoBlood, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(pnlRightLogin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        pnlLoginLayout.setVerticalGroup(
            pnlLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(pnlLoginLayout.createSequentialGroup()
                .addGap(74, 74, 74)
                .addComponent(lblLogoBlood, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblheading)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(pnlRightLogin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout pnlDonorLoginLayout = new javax.swing.GroupLayout(pnlDonorLogin);
        pnlDonorLogin.setLayout(pnlDonorLoginLayout);
        pnlDonorLoginLayout.setHorizontalGroup(
            pnlDonorLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlLogin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        pnlDonorLoginLayout.setVerticalGroup(
            pnlDonorLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlLogin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pnlWelcomeScreen.setBackground(new java.awt.Color(204, 0, 51));
        pnlWelcomeScreen.setPreferredSize(new java.awt.Dimension(1000, 650));

        lblBloodLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/bloodbank/resources/blooddonationiconpng (1).png"))); // NOI18N

        lblHeadingTitle.setFont(new java.awt.Font("Microsoft Sans Serif", 1, 24)); // NOI18N
        lblHeadingTitle.setForeground(new java.awt.Color(255, 255, 255));
        lblHeadingTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblHeadingTitle.setText("Welcome To Blood Bank Nepal");

        lblSubHeading.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 18)); // NOI18N
        lblSubHeading.setForeground(new java.awt.Color(255, 255, 255));
        lblSubHeading.setText("                                                                        Donate Blood Save Life");

        lblThirdHeading.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 22)); // NOI18N
        lblThirdHeading.setForeground(new java.awt.Color(255, 255, 255));
        lblThirdHeading.setText("Nepal's Number One Blood Bank");

        lblLoading.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 14)); // NOI18N
        lblLoading.setForeground(new java.awt.Color(255, 255, 255));
        lblLoading.setText(" Loading...");

        javax.swing.GroupLayout pnlWelcomeScreenLayout = new javax.swing.GroupLayout(pnlWelcomeScreen);
        pnlWelcomeScreen.setLayout(pnlWelcomeScreenLayout);
        pnlWelcomeScreenLayout.setHorizontalGroup(
            pnlWelcomeScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblSubHeading, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(lblHeadingTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(pnlWelcomeScreenLayout.createSequentialGroup()
                .addGroup(pnlWelcomeScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlWelcomeScreenLayout.createSequentialGroup()
                        .addGap(246, 246, 246)
                        .addComponent(lblBloodLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlWelcomeScreenLayout.createSequentialGroup()
                        .addGap(296, 296, 296)
                        .addComponent(lblThirdHeading, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlWelcomeScreenLayout.createSequentialGroup()
                        .addGap(287, 287, 287)
                        .addGroup(pnlWelcomeScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pgBarSplashScreen, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblLoading, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(241, Short.MAX_VALUE))
        );
        pnlWelcomeScreenLayout.setVerticalGroup(
            pnlWelcomeScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlWelcomeScreenLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(lblBloodLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblHeadingTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblSubHeading)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblThirdHeading)
                .addGap(27, 27, 27)
                .addComponent(lblLoading)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pgBarSplashScreen, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(107, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlWelcomeScreen, javax.swing.GroupLayout.DEFAULT_SIZE, 900, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlWelcomeScreen, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 550, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

     /**
     * Initializes the layout of the application by setting up the CardLayout
     * and adding panels for different screens. Each panel is uniquely
     * identified for easy navigation between screens.
     */
    private void initializePanelLayout() {
        cardLayout = new java.awt.CardLayout();
        getContentPane().setLayout(cardLayout);
        
        
         //Adding panels with unique identifiers 
        getContentPane().add(pnlWelcomeScreen, "LoadingScreen");
        getContentPane().add(pnlDonorLogin, "LoginScreen");
        getContentPane().add(pnlDonorDashBoard, "MainScreen");
                                          
         //Start with loading screen
        runScreen("LoadingScreen");
        
    }
    
    
    
    
    /**
     * Initializes the application's data, including the donor list and table.
     * Populates the donor list with sample data for demonstration purposes.
     */
   private void toInitializeData() {
       donorList = new LinkedList<>();
       
       // Registering the sample of donors
       registerDonor(new BloodModel(2038,"Ram Chaudhary", (short) 25, "9822445455", "A+", "Butwal", "ram123@gmail.com", "Male"));
       registerDonor(new BloodModel(2040,"Sujata Bhusal", (short) 22, "9823567832", "B+", "Chitwan", "sujata246@gmail.com", "Female"));
       registerDonor(new BloodModel(2031,"Sudip Tamang", (short) 28, "9812783213", "A-", "Dharan", "sudip321@gmail.com", "Male"));
       registerDonor(new BloodModel(2036,"Nabin Koirala", (short) 26, "9823445455", "AB+", "Nepalgunj", "nabin221@gmail.com", "Male"));  
       registerDonor(new BloodModel(2037,"Bipin Rajbanshi",(short)32,"9812093475","O+","Janakpur","rajbanshibipin212@gmail.com","Male"));
       registerDonor(new BloodModel(2039,"Rahul Yadav",(short)32,"9812343486","O-","Saptari","ydvrahul22@gmail.com","Male"));
       
        
   }
    
    
    /**
     * Simulates the loading progress using a SwingWorker thread. Updates a
     * progress bar incrementally and switches to the login screen upon
     * completion.
     */
    private void runProgress(){
        javax.swing.SwingWorker<Void, Integer> run;
        run = new javax.swing.SwingWorker<>(){ 
            @Override
            protected Void doInBackground() throws Exception {
                for (int i = 0; i <= 100; i++){
                    Thread.sleep(30); // Delay for progress bar
                    publish(i); // Publish progress
                    
                } 
                return null;
            }
            @Override
            protected void process(java.util.List<Integer> chunks) {
                int progress = chunks.get(chunks.size() -1);
                pgBarSplashScreen.setValue(progress);
                pgBarSplashScreen.setString(progress + "%");
                pgBarSplashScreen.setStringPainted(true);
            }

            @Override
            protected void done() {
                runScreen("LoginScreen"); // Switch to login screen
            }
        };
          run.execute();
        
    }
    
    // Method to add donor and populate the data
    private void registerDonor(BloodModel  donor){
        donorList.add(donor);
        DefaultTableModel tblModel = (DefaultTableModel) tblDonor.getModel();
        tblModel.addRow(new Object[]{
               donor.getDonorId(), donor.getFullName(), donor.getAge(), donor.getContact(), donor.getBloodGroup(), donor.getAddress(), 
               donor.getEmail(), donor.getGender()
        });
    }
    
    
    
    
    
    
    /**
     * Populates the JTable with the current list of donor records. Clears
     * existing rows in the table model before adding new data.
     */
    private void donorListToTable(List<BloodModel> donorList) {
        DefaultTableModel tblModel = (DefaultTableModel) tblDonor.getModel();
        
        // clear all row if required
        tblModel.setRowCount(0);
        
        // Populate the table with donor data
        donorList.forEach(donor -> tblModel.addRow(new Object[]{
             donor.getDonorId(), donor.getFullName(), 
            donor.getAge(), donor.getContact(), 
            donor.getBloodGroup(), donor.getAddress(),
            donor.getEmail(), donor.getGender()
    }));
    }
    
    
    /**
     * Validates a single input field based on specific criteria and updates its
     * visual state.
     *
     * @param textField the JTextField to validate
     * @param fieldName the name of the field for error display
     * @param errorLbl the JLabel to show error messages
     * @param errorMsg the error message to display for invalid input
     * @param errorColor the color for error borders and text
     * @param successColor the color for successful validation borders
     * @param isValidFormat whether the input satisfies the field-specific
     * validation criteria
     * @return true if the field passes validation, false otherwise
     */
  
    
   private boolean tovalidateTextField(JTextField textField, String fieldName, JLabel errorLbl, String errorMsg, Color errorDarkRed, Color successColor, boolean isValidFormat) {
        if (ValidationUtil.isNullOrEmpty(textField.getText())) {
            textField.setBorder(createBloodBankTitledBorder(errorDarkRed, fieldName));
            errorLbl.setText("Please fill detail!");
            errorLbl.setVisible(true);
            return false;
        } else if (!isValidFormat) {
            textField.setBorder(createBloodBankTitledBorder(errorDarkRed, fieldName));
            errorLbl.setText(errorMsg);
            errorLbl.setVisible(true);
            return false;
        } else {
            textField.setBorder(createBloodBankTitledBorder(successColor, fieldName));
            errorLbl.setVisible(false);
            return true;
        }
    }
   
    /**
     * Creates a custom TitledBorder with specified color and title.
     *
     * @param color the color for the border and title
     * @param title the title text for the border
     * @return a TitledBorder instance
     */
    private javax.swing.border.TitledBorder createBloodBankTitledBorder(Color color, String title) {
        return javax.swing.BorderFactory.createTitledBorder(
                javax.swing.BorderFactory.createLineBorder(color, 3),
                title,
                javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION,
                javax.swing.border.TitledBorder.DEFAULT_POSITION,
                new java.awt.Font("Segoe UI", 1, 12),
                color
        );
    }

   
    
     /**
     * Displays a message dialog box with the given message, title, and type.
     *
     * @param message the message to display
     * @param title the title of the dialog box
     * @param messageType the type of message (e.g., information, warning, or
     * error)
     */
    
    private void toDisplayDialogBox(String message, String title, int messageType) {
        JOptionPane.showMessageDialog(this, message, title, messageType);
    }
    
    
    

    
    
    /**
     * Switches the application screen to the specified screen name.
     *
     * @param screenName The name of the screen to display.
     */
    private void runScreen(String screenName) {
        cardLayout.show(getContentPane(), screenName);
    }
    
    /**
     * Handles the login button action. Validates the username and password
     * input and navigates to the main screen if credentials are correct.
     * Displays appropriate error messages otherwise.
     *
     * @param evt The action event triggered by the login button.
     */
    
    private void btnLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoginActionPerformed
        // TODO add your handling code here:
        // get username and password input
       // get username and password input
    String username = txtFldUsername.getText();
    String password = new String(pwFldPassword.getPassword());
    
    // check if username or password is empty
    if(username.isEmpty() || password.isEmpty()) {
        lblErrorLogin.setText("Please fill Username and Password");
    }
    // check for incorrect username and password
    else if (!username.equals("prabin") && !password.equals("prabin")) {
        lblErrorLogin.setText("Invalid Username and Password...!");
    }
    // check if only username is incorrect
    else if (!username.equals("prabin")) {
        lblErrorLogin.setText("Incorrect Username");
    }
    // check if only password is incorrect
    else if (!password.equals("prabin")) {
        lblErrorLogin.setText("Incorrect Password");
    }
    // If all details are correct then proceed to main screen
    else {
        lblErrorLogin.setText(""); // clear error messages from txtfield
         JOptionPane.showMessageDialog(this, "Successfully Logged In!", "Login Successful", JOptionPane.INFORMATION_MESSAGE);
        runScreen("MainScreen");
    }
        
      
    }//GEN-LAST:event_btnLoginActionPerformed

/**
 * Handles the logout button action. Prompts the user for confirmation
 * before logging out. Clears the login fields and switches back to 
 * the login screen if confirmed.
 *
 * @param evt The action event triggered by the logout button.
 */
    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
        // TODO add your handling code here:
       // Show confirmation dialog
    int response = JOptionPane.showConfirmDialog(
        null, 
        "Are you sure you want to logout?", 
        "Logout Confirmation", 
        JOptionPane.YES_NO_OPTION, 
        JOptionPane.QUESTION_MESSAGE
    );

    // If user confirms logout
    if (response == JOptionPane.YES_OPTION) {
        txtFldUsername.setText("");
        pwFldPassword.setText("");
        runScreen("LoginScreen"); // Load the login screen
    }
        
    }//GEN-LAST:event_btnLogoutActionPerformed

    /**
     * clear all input field form the donor details
     * @param evt 
     */
    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
        txtFldDonorId.setText("");
        txtFldFullName.setText("");
        txtFldAge.setText("");
        txtFldContact.setText("");
        txtFldBloodGroup.setText("");
        txtFldAddress.setText("");
        txtFldEmail.setText("");
        txtFldGender.setText("");
        
    }//GEN-LAST:event_btnClearActionPerformed

    /**
     * Clears all input fields in the Donor form. Resets each field's value to
     * an empty string.
     */
    private void clearDonorForm() {
        txtFldDonorId.setText("");
        txtFldFullName.setText("");
        txtFldAge.setText("");
        txtFldContact.setText("");
        txtFldBloodGroup.setText("");
        txtFldAddress.setText("");
        txtFldEmail.setText("");
        txtFldGender.setText("");
        
    }
    
    
    
   
    
    // Adding button function
    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
         boolean isValid = true;

    // Validate Donor ID
    isValid &= tovalidateTextField(txtFldDonorId, "Donor ID", lblErrorDonorId, "Contain 4-digit number Only!.",
            errorDarkRed, whiteColor, ValidationUtil.isValidDonorId(txtFldDonorId.getText())
    );

    // Validate Full Name
    isValid &= tovalidateTextField(txtFldFullName, "Full Name", lblErrorFullName, "Contain only alphabets.",
            errorDarkRed, whiteColor, ValidationUtil.isValidName(txtFldFullName.getText())
    );

    // Validate Blood Group
    isValid &= tovalidateTextField(txtFldBloodGroup, "Blood Group", lblErrorBloodGroup, "Select A-, A+, O+, B+, AB+, B-, O- or AB-.",
            errorDarkRed, whiteColor, ValidationUtil.isValidBloodGroup(txtFldBloodGroup.getText())
    );

    // Validate Contact
    isValid &= tovalidateTextField(txtFldContact, "Contact", lblErrorContact, "Start with 98 and have 10 digits numbers.",
            errorDarkRed, whiteColor, ValidationUtil.isValidContact(txtFldContact.getText())
    );

    // Validate Address
    isValid &= tovalidateTextField(txtFldAddress, "Address", lblErrorAddress, "Contain only alphabets.",
            errorDarkRed, whiteColor, ValidationUtil.isValidAddress(txtFldAddress.getText())
    );

    // Validate Email
    isValid &= tovalidateTextField(txtFldEmail, "Email", lblErrorEmail, "Contain @ in email address.",
            errorDarkRed, whiteColor, ValidationUtil.isValidEmail(txtFldEmail.getText())
    );

    // Validate Gender
    isValid &= tovalidateTextField(txtFldGender, "Gender", lblErrorGender, "Select Male, Female, or Others.",
            errorDarkRed, whiteColor, ValidationUtil.isValidGender(txtFldGender.getText())
    );

    // Validate Age
    try {
        short age = Short.parseShort(txtFldAge.getText().trim());
        isValid &= tovalidateTextField(txtFldAge, "Age", lblErrorAge, "Age must be between 18 to 50.",
                errorDarkRed, whiteColor, ValidationUtil.isValidAge(age)
        );
    } catch (NumberFormatException e) {
        tovalidateTextField(txtFldAge, "Age", lblErrorAge, "Contain valid number only!.", errorDarkRed, whiteColor, false);
        isValid = false;
    }

    if (isValid) {
        // Creating a BloodModel instance
        BloodModel newDonor = new BloodModel(
                Integer.parseInt(txtFldDonorId.getText().trim()),
                txtFldFullName.getText().trim(),
                Short.parseShort(txtFldAge.getText().trim()),
                txtFldContact.getText().trim(),
                txtFldBloodGroup.getText().trim(),
                txtFldAddress.getText().trim(),
                txtFldEmail.getText().trim(),
                txtFldGender.getText().trim()
        );

        // Check for duplicate Donor ID
        if (checkDuplicateDonor(newDonor)) {
            txtFldDonorId.setBorder(createBloodBankTitledBorder(errorDarkRed, "Donor ID"));
            toDisplayDialogBox("ID Already exists in the table.", "Duplicate Entry", JOptionPane.WARNING_MESSAGE);
        } else {
            // Add the donor if no duplicate is found
            donorList.add(newDonor);
            clearDonorForm();
            donorListToTable(donorList);
            txtFldDonorId.setBorder(createBloodBankTitledBorder(whiteColor, "Donor ID"));
            toDisplayDialogBox("Added successfully.", "Successful", JOptionPane.INFORMATION_MESSAGE);
        }
    }

      
      
       
    }//GEN-LAST:event_btnAddActionPerformed

    
    
   
    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
     // Update Button Functionality                                         
    boolean isValid = true; // To track if all validations pass

    // Validate each field and track if any validation fails
    isValid &= tovalidateTextField(txtFldDonorId, "Donor ID", lblErrorDonorId, "Contain 4-digit number only!.",
            errorDarkRed, whiteColor, ValidationUtil.isValidDonorId(txtFldDonorId.getText())
    );
    isValid &= tovalidateTextField(txtFldFullName, "Full Name", lblErrorFullName, "Contain only alphabets.",
            errorDarkRed, whiteColor, ValidationUtil.isValidName(txtFldFullName.getText())
    );
    isValid &= tovalidateTextField(txtFldBloodGroup, "Blood Group", lblErrorBloodGroup, "Select A-, A+, O+, B+, AB+, B-, O- or AB-.",
            errorDarkRed, whiteColor, ValidationUtil.isValidBloodGroup(txtFldBloodGroup.getText())
    );
    isValid &= tovalidateTextField(txtFldContact, "Contact", lblErrorContact, "Start with 98 have 10 digits numbers.",
            errorDarkRed, whiteColor, ValidationUtil.isValidContact(txtFldContact.getText())
    );
    isValid &= tovalidateTextField(txtFldAddress, "Address", lblErrorAddress, "Contain only alphabets.",
            errorDarkRed, whiteColor, ValidationUtil.isValidAddress(txtFldAddress.getText())
    );
    isValid &= tovalidateTextField(txtFldEmail, "Email", lblErrorEmail, "Must have @ in email address.",
            errorDarkRed, whiteColor, ValidationUtil.isValidEmail(txtFldEmail.getText())
    );
    isValid &= tovalidateTextField(txtFldGender, "Gender", lblErrorGender, "Select Male, Female, or Others.",
            errorDarkRed, whiteColor, ValidationUtil.isValidGender(txtFldGender.getText())
    );

    try {
        short age = Short.parseShort(txtFldAge.getText().trim());
        isValid &= tovalidateTextField(txtFldAge, "Age", lblErrorAge, "Age must be between 18 to 50.",
                errorDarkRed, whiteColor, ValidationUtil.isValidAge(age)
        );
    } catch (NumberFormatException e) {
        isValid &= tovalidateTextField(txtFldAge, "Age", lblErrorAge, "Contain valid number only.", errorDarkRed, whiteColor, false);
    }

    // If any validation fails, show a warning and return
    if (!isValid) {
        JOptionPane.showMessageDialog(this, "Please check  highlighted fields and Try Again.!!!", "Error", JOptionPane.WARNING_MESSAGE);
        return;
    }

    // Proceed to update the table if validations pass
    DefaultTableModel tableModel = (DefaultTableModel) tblDonor.getModel();
    if (tblDonor.getSelectedRowCount() == 1) {
        try {
            int selectedRow = tblDonor.getSelectedRow();

            // Retrieve existing values for fields which are not updated
            Object donorId = tableModel.getValueAt(selectedRow, 0);
            Object fullname = tableModel.getValueAt(selectedRow, 1);
            Object age = tableModel.getValueAt(selectedRow, 2);
            Object contact = tableModel.getValueAt(selectedRow, 3);
            Object bloodgroup = tableModel.getValueAt(selectedRow, 4);
            Object address = tableModel.getValueAt(selectedRow, 5);
            Object email = tableModel.getValueAt(selectedRow, 6);
            Object gender = tableModel.getValueAt(selectedRow, 7);

            // Update only if the corresponding input field is not empty
            if (!txtFldDonorId.getText().trim().isEmpty()) {
                donorId = Integer.valueOf(txtFldDonorId.getText().trim());
            }
            if (!txtFldFullName.getText().trim().isEmpty()) {
                fullname = txtFldFullName.getText().trim();
            }
            if (!txtFldAge.getText().trim().isEmpty()) {
                age = Short.valueOf(txtFldAge.getText().trim());
            }
            if (!txtFldContact.getText().trim().isEmpty()) {
                contact = txtFldContact.getText().trim();
            }
            if (!txtFldBloodGroup.getText().trim().isEmpty()) {
                bloodgroup = txtFldBloodGroup.getText().trim();
            }
            if (!txtFldAddress.getText().trim().isEmpty()) {
                address = txtFldAddress.getText().trim();
            }
            if (!txtFldEmail.getText().trim().isEmpty()) {
                email = txtFldEmail.getText().trim();
            }
            if (!txtFldGender.getText().trim().isEmpty()) {
                gender = txtFldGender.getText().trim();
            }

            // Update the table with the new values
            tableModel.setValueAt(donorId, selectedRow, 0);
            tableModel.setValueAt(fullname, selectedRow, 1);
            tableModel.setValueAt(age, selectedRow, 2);
            tableModel.setValueAt(contact, selectedRow, 3);
            tableModel.setValueAt(bloodgroup, selectedRow, 4);
            tableModel.setValueAt(address, selectedRow, 5);
            tableModel.setValueAt(email, selectedRow, 6);
            tableModel.setValueAt(gender, selectedRow, 7);

            // Updated message display
            JOptionPane.showMessageDialog(this, "Updated Successfully");
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, " Please select details row to update.", "Error", JOptionPane.ERROR_MESSAGE); 
        }
    } else {
        if (tblDonor.getRowCount() == 0) {
            // If table is empty
            JOptionPane.showMessageDialog(this, "Table is empty");
        } else {
            // If no row or multiple rows are selected
            JOptionPane.showMessageDialog(this, "Please select a row to Update Data.");
        }
    }
 

        
    }//GEN-LAST:event_btnUpdateActionPerformed

    
    
    
    
    
    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
       // Delete Button Functionality
       DefaultTableModel tableModel = (DefaultTableModel) tblDonor.getModel();
        
        // delete row 
        if (tblDonor.getSelectedRowCount()==1){
            // if single row is selected than delete 
            tableModel.removeRow(tblDonor.getSelectedRow());
            JOptionPane.showMessageDialog(this, "Deleted Successfully");

        }else{
            if(tblDonor.getRowCount()==0){
                // if table is empty(no data) than display message 
                JOptionPane.showMessageDialog(this,"Table is empty.");
                
            }else{
                // If table is not empty butbrow is not selected or multiple row is selected 
                JOptionPane.showMessageDialog(this, "Please select Row to Delete Info.");
                
            }
        }
        
        
    }//GEN-LAST:event_btnDeleteActionPerformed

    
    private void pwFldPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pwFldPasswordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pwFldPasswordActionPerformed

    private void btnSelectionSortDonorIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectionSortDonorIdActionPerformed
        // TODO add your handling code here:
        SelectionSort selectionSort = new SelectionSort();
        donorListToTable(selectionSort.sortByDonorId(donorList, false));
     
    }//GEN-LAST:event_btnSelectionSortDonorIdActionPerformed

    private void btnSearchNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchNameActionPerformed
        // TODO add your handling code here:
     // Get the search term entered by the user
        String searchName = txtFldSearch.getText().trim();

        // Clear the existing rows in the table
        DefaultTableModel model = (DefaultTableModel) tblDonor.getModel();
        model.setRowCount(0);

        // Check if donorList is initialized and not empty
        if (donorList == null || donorList.isEmpty()) {
            JOptionPane.showMessageDialog(null, "No donor data available.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Sort the donor list by full name (required for binary search)
        donorList.sort((a1, a2) -> a1.getFullName().compareToIgnoreCase(a2.getFullName()));

        // Perform binary search using the BinarySearch class
        BloodModel searchDonor = BinarySearch.searchByFullName(searchName, donorList, 0, donorList.size() - 1);

        // If a matching donor is found, add their details to the table
        if (searchDonor != null) {
            model.addRow(new Object[]{
                searchDonor.getDonorId(),
                searchDonor.getFullName(),
                searchDonor.getAge(),
                searchDonor.getContact(),
                searchDonor.getBloodGroup(),
                searchDonor.getAddress(),
                searchDonor.getEmail(),
                searchDonor.getGender()
            });
        } else {
            // Showing a message if no matching records are found
            JOptionPane.showMessageDialog(null, "No donor details found for: " + searchName, "Search Result", JOptionPane.INFORMATION_MESSAGE);
        }
    
    
    }//GEN-LAST:event_btnSearchNameActionPerformed

    private void btnInsertionSortAddressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertionSortAddressActionPerformed
        // TODO add your handling code here:
     InsertionSort insertionSort = new InsertionSort();
     donorListToTable(insertionSort.sortByAddress(donorList, false));

    }//GEN-LAST:event_btnInsertionSortAddressActionPerformed

  
    

    
  
    private void btnMergeSortAgeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMergeSortAgeActionPerformed
        // TODO add your handling code here:
        MergeSort mergeSort = new MergeSort();
        donorListToTable(mergeSort.mergeSortByAge(donorList, false)); // Sort by age in ascending order

         
    }//GEN-LAST:event_btnMergeSortAgeActionPerformed

    
    
    private void tblDonorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDonorMouseClicked
        // TODO add your handling code here:
                                          
       // Check if a row is selected
        int selectedRow = tblDonor.getSelectedRow();
        if (selectedRow != -1) {
        try {
            // Get the table model
            DefaultTableModel tableModel = (DefaultTableModel) tblDonor.getModel();

            // Retrieve data from the selected row
            int donorId = Integer.parseInt(tableModel.getValueAt(selectedRow, 0).toString());
            String fullName = tableModel.getValueAt(selectedRow, 1).toString();
            short age = Short.parseShort(tableModel.getValueAt(selectedRow, 2).toString());
            String contact = tableModel.getValueAt(selectedRow, 3).toString();
            String bloodGroup = tableModel.getValueAt(selectedRow, 4).toString();
            String address = tableModel.getValueAt(selectedRow, 5).toString();
            String email = tableModel.getValueAt(selectedRow, 6).toString();
            String gender = tableModel.getValueAt(selectedRow, 7).toString();

            // Setting the data to the corresponding text fields
            txtFldDonorId.setText(String.valueOf(donorId));
            txtFldFullName.setText(fullName);
            txtFldAge.setText(String.valueOf(age));
            txtFldContact.setText(contact);
            txtFldBloodGroup.setText(bloodGroup);
            txtFldAddress.setText(address);
            txtFldEmail.setText(email);
            txtFldGender.setText(gender);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid data format. Please check the table.", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "An error occurred while retrieving data.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } else {
        JOptionPane.showMessageDialog(this, "Please select a single row.", "Error", JOptionPane.WARNING_MESSAGE);
    }

    }//GEN-LAST:event_tblDonorMouseClicked

  
    private void txtFldFullNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFldFullNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFldFullNameActionPerformed


    
    
    
    
    
    
   /**
     * Checks whether a donor with the same Donor ID already exists in the
     * donor list.
     *
     * @param donor the DonorModel object to check for duplicates
     * @return true if a duplicate is found, false otherwise
     */
    private boolean checkDuplicateDonor(BloodModel donor) {
        return donorList.stream()
                .anyMatch(existingDonor
                        -> existingDonor.getDonorId() == donor.getDonorId());
    }

    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BloodBank.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BloodBank.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BloodBank.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BloodBank.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
      BloodBank bank = new BloodBank();
      
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
         bank.setVisible(true);
            
        });
        bank.runProgress();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnInsertionSortAddress;
    private javax.swing.JButton btnLogin;
    private javax.swing.JButton btnLogout;
    private javax.swing.JButton btnMergeSortAge;
    private javax.swing.JButton btnSearchName;
    private javax.swing.JButton btnSelectionSortDonorId;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel lblAddressDetail;
    private javax.swing.JLabel lblAdminLogo;
    private javax.swing.JLabel lblBloodLogo;
    private javax.swing.JLabel lblCallIcon;
    private javax.swing.JLabel lblCallUs;
    private javax.swing.JLabel lblCallingDetails;
    private javax.swing.JLabel lblContactUs;
    private javax.swing.JLabel lblDonateImg;
    private javax.swing.JLabel lblDonorData;
    private javax.swing.JLabel lblErrorAddress;
    private javax.swing.JLabel lblErrorAge;
    private javax.swing.JLabel lblErrorBloodGroup;
    private javax.swing.JLabel lblErrorContact;
    private javax.swing.JLabel lblErrorDonorId;
    private javax.swing.JLabel lblErrorEmail;
    private javax.swing.JLabel lblErrorFullName;
    private javax.swing.JLabel lblErrorGender;
    private javax.swing.JLabel lblErrorLogin;
    private javax.swing.JLabel lblFooterTitle;
    private javax.swing.JLabel lblFooterTitle1;
    private javax.swing.JLabel lblForgetPassword;
    private javax.swing.JLabel lblHandImg;
    private javax.swing.JLabel lblHeadingTitle;
    private javax.swing.JLabel lblHeadingTitle1;
    private javax.swing.JLabel lblIconAddress;
    private javax.swing.JLabel lblIconSendMsg;
    private javax.swing.JLabel lblInfoTable;
    private javax.swing.JLabel lblLoading;
    private javax.swing.JLabel lblLocation;
    private javax.swing.JLabel lblLogo;
    private javax.swing.JLabel lblLogoBlood;
    private javax.swing.JLabel lblLogout;
    private javax.swing.JLabel lblMessageDetail;
    private javax.swing.JLabel lblMiddle;
    private javax.swing.JLabel lblPointingIcon;
    private javax.swing.JLabel lblSendMessage;
    private javax.swing.JLabel lblSingnInTitle;
    private javax.swing.JLabel lblSubHeading;
    private javax.swing.JLabel lblSubHeading1;
    private javax.swing.JLabel lblSubHeadingTitleLogin;
    private javax.swing.JLabel lblSubMiddle;
    private javax.swing.JLabel lblThirdHeading;
    private javax.swing.JLabel lblWelcomeBloodBankTitle;
    private javax.swing.JLabel lblheading;
    private javax.swing.JProgressBar pgBarSplashScreen;
    private javax.swing.JPanel pnlContactDetails;
    private javax.swing.JPanel pnlContactUs;
    private javax.swing.JPanel pnlDetails;
    private javax.swing.JPanel pnlDonorDashBoard;
    private javax.swing.JPanel pnlDonorData;
    private javax.swing.JPanel pnlDonorList;
    private javax.swing.JPanel pnlDonorLogin;
    private javax.swing.JPanel pnlHome;
    private javax.swing.JPanel pnlImgDonate;
    private javax.swing.JPanel pnlLogin;
    private javax.swing.JPanel pnlMainBar;
    private javax.swing.JPanel pnlMiddleHome;
    private javax.swing.JPanel pnlRightLogin;
    private javax.swing.JPanel pnlWelcomeScreen;
    private javax.swing.JPasswordField pwFldPassword;
    private javax.swing.JScrollPane spTblDonor;
    private javax.swing.JTabbedPane tabPanMain;
    private javax.swing.JTable tblDonor;
    private javax.swing.JTextField txtFldAddress;
    private javax.swing.JTextField txtFldAge;
    private javax.swing.JTextField txtFldBloodGroup;
    private javax.swing.JTextField txtFldContact;
    private javax.swing.JTextField txtFldDonorId;
    private javax.swing.JTextField txtFldEmail;
    private javax.swing.JTextField txtFldFullName;
    private javax.swing.JTextField txtFldGender;
    private javax.swing.JTextField txtFldSearch;
    private javax.swing.JTextField txtFldUsername;
    // End of variables declaration//GEN-END:variables
}
